{"version":3,"sources":["../src/actions/getStakingStats.ts","../src/environment.ts","../src/examples.ts","../src/services.ts","../src/actions/getVaults.ts","../src/actions/getTrendingAgents.ts","../src/index.ts"],"sourcesContent":["import {\n    elizaLogger,\n    Action,\n    ActionExample,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    State,\n} from \"@elizaos/core\";\nimport { validateKilnConfig } from \"../environment\";\nimport { getStakingStatisticsExamples } from \"../examples\";\nimport { createKilnService } from \"../services\";\n\nexport const getStakingStatisticsAction: Action = {\n    name: \"KILN_GET_STAKING_STATISTICS\",\n    similes: [\n        \"STAKING_STATISTICS\",\n        \"STAKING\",\n        \"APY\",\n        \"ANNUAL_PERCENTAGE_YIELD\"\n    ],\n    description: \"Get statistics about staking revenue on different blockchains\",\n    validate: async (runtime: IAgentRuntime) => {\n        await validateKilnConfig(runtime);\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback: HandlerCallback\n    ) => {\n\n        const config = await validateKilnConfig(runtime);\n        const kilnService = createKilnService(\n            config.KILN_API_KEY\n        );\n\n        try {\n            const StakingStatsData = await kilnService.getStakingStatistics();\n            elizaLogger.success(\n                `Successfully fetched StakingStats`\n            );\n            if (callback) {\n                const combinedText = StakingStatsData.map(stakingData =>\n                    `${stakingData.chain.toUpperCase()} :\\r\\n - ${stakingData.data.nb_validators} validators.\\r\\n - ${stakingData.data.network_gross_apy.toFixed(2)}% of gross APY`\n                ).join('\\r\\n');\n\n                callback({\n                    text: `Here are statistics about staking on different chains :\\r\\n${combinedText}`,\n                });\n                return true;\n            }\n        } catch (error:any) {\n            elizaLogger.error(\"Error in Kiln plugin handler:\", error);\n            callback({\n                text: `Error fetching Staking Statistics: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n    },\n    examples: getStakingStatisticsExamples as ActionExample[][],\n} as Action;\n","import { IAgentRuntime } from \"@elizaos/core\";\nimport { z } from \"zod\";\n\nexport const kilnEnvSchema = z.object({\n    KILN_API_KEY: z.string().min(1, \"Kiln API key is required\"),\n});\n\nexport type kilnConfig = z.infer<typeof kilnEnvSchema>;\n\nexport async function validateKilnConfig(\n    runtime: IAgentRuntime\n): Promise<kilnConfig> {\n    try {\n        const config = {\n            KILN_API_KEY: runtime.getSetting(\"KILN_API_KEY\"),\n        };\n        console.log('config: ', config)\n        return kilnEnvSchema.parse(config);\n    } catch (error) {\n        console.log(\"error::::\", error)\n        if (error instanceof z.ZodError) {\n            const errorMessages = error.errors\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\n                .join(\"\\n\");\n            throw new Error(\n                `Kiln API configuration validation failed:\\n${errorMessages}`\n            );\n        }\n        throw error;\n    }\n}\n\nexport const cookieEnvSchema = z.object({\n    COOKIE_API_KEY: z.string().min(1, \"Cookie API key is required\"),\n});\n\nexport type cookieConfig = z.infer<typeof cookieEnvSchema>;\n\nexport async function validateCookieConfig(\n    runtime: IAgentRuntime\n): Promise<cookieConfig> {\n    try {\n        const config = {\n            COOKIE_API_KEY: runtime.getSetting(\"COOKIE_API_KEY\"),\n        };\n        console.log('config: ', config)\n        return cookieEnvSchema.parse(config);\n    } catch (error) {\n        console.log(\"error::::\", error)\n        if (error instanceof z.ZodError) {\n            const errorMessages = error.errors\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\n                .join(\"\\n\");\n            throw new Error(\n                `Cookie API configuration validation failed:\\n${errorMessages}`\n            );\n        }\n        throw error;\n    }\n}\n","import { ActionExample } from \"@elizaos/core\";\n\nexport const getStakingStatisticsExamples: ActionExample[][] = [\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"I wonder what are the most profitable staking options today?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"\",\n                action: \"KILN_GET_STAKING_STATISTICS\",\n            },\n        }\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Can you give information about the APY of various blockchains?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"\",\n                action: \"KILN_GET_STAKING_STATISTICS\",\n            },\n        }\n    ],\n]\n\nexport const getVaultsExamples: ActionExample[][] = [\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What are Kiln's Vaults addresses?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"\",\n                action: \"KILN_GET_VAULT\",\n            },\n        }\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"How can i use Kiln's staking solutions?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"\",\n                action: \"KILN_GET_VAULT\",\n            },\n        }\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Pick one vault and transfer my funds.\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Sure!\",\n            },\n        }\n    ],\n]\n\nexport const getTrendingAgentsExamples: ActionExample[][] = [\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Who are the best AI Agent at the moment?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"\",\n                action: \"COOKIE_GET_TRENDING\",\n            },\n        }\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"On which twitter agent should I invest?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"\",\n                action: \"COOKIE_GET_TRENDING\",\n            },\n        }\n    ]\n]\n","import {\n    StatsDataResponse,\n    StatsResponse, TrendingAgentsOk\n} from \"./types\";\nimport {elizaLogger} from \"@elizaos/core\";\n\nconst BASE_URLS = [\n    \"https://api.kiln.fi/v1/eth/network-stats\",\n    \"https://api.kiln.fi/v1/ada/network-stats\",\n    \"https://api.kiln.fi/v1/tia/network-stats\",\n    \"https://api.kiln.fi/v1/atom/network-stats\",\n    \"https://api.kiln.fi/v1/dydx/network-stats\",\n    \"https://api.kiln.fi/v1/fet/network-stats\",\n    \"https://api.kiln.fi/v1/inj/network-stats\",\n    \"https://api.kiln.fi/v1/kava/network-stats\",\n    \"https://api.kiln.fi/v1/ksm/network-stats\",\n    \"https://api.kiln.fi/v1/egld/network-stats\",\n    \"https://api.kiln.fi/v1/near/network-stats\",\n    \"https://api.kiln.fi/v1/osmo/network-stats\",\n    \"https://api.kiln.fi/v1/dot/network-stats\",\n    \"https://api.kiln.fi/v1/pol/network-stats\",\n    \"https://api.kiln.fi/v1/sol/network-stats\",\n    \"https://api.kiln.fi/v1/xtz/network-stats\",\n    \"https://api.kiln.fi/v1/zeta/network-stats\"\n];\n\nconst COOKIE_URL = \"https://api.cookie.fun/v2/agents/agentsPaged?interval=_7Days&page=1&pageSize=5\"\n\nexport const createKilnService = (apiKey: string) => {\n    const extractChain = (url: string): string => {\n        const matches = url.match(/\\/v1\\/([^/]+)\\/network-stats/);\n        return matches ? matches[1] : '';\n    };\n\n    const fetchNetworkStats = async (url: string): Promise<StatsDataResponse> => {\n        try {\n            const response = await fetch(url, {\n                headers: {\n                    'Authorization': `Bearer ${apiKey}`\n                }\n            });\n            if (!response.ok) {\n                const error = await response.json();\n                throw new Error(error?.message || response.statusText);\n            }\n            const data: StatsDataResponse = await response.json();\n            data.chain = extractChain(url);  // Add chain to the response\n            return data;\n        } catch (error: any) {\n            console.error(`Kiln API Error for ${url}:`, error.message);\n            throw error;\n        }\n    };\n\n    const getStakingStatistics = async (): Promise<StatsDataResponse[]> => {\n        if (!apiKey) {\n            throw new Error(\"API key is required\");\n        }\n\n        try {\n            const results = await Promise.allSettled(\n                BASE_URLS.map(url => fetchNetworkStats(url))\n            );\n\n            const successfulResults = results\n                .filter((result): result is PromiseFulfilledResult<StatsDataResponse> =>\n                    result.status === 'fulfilled'\n                )\n                .map(result => result.value);\n\n            results.forEach((result, index) => {\n                if (result.status === 'rejected') {\n                    console.error(`Failed to fetch data for ${BASE_URLS[index]}:`, result.reason);\n                }\n            });\n\n            return successfulResults;\n        } catch (error: any) {\n            console.error(\"Kiln Service Error:\", error.message);\n            throw error;\n        }\n    };\n\n    return { getStakingStatistics };\n};\n\nexport const createCookieService = (apiKey: string) => {\n    const getTradingAgents = async (): Promise<TrendingAgentsOk> => {\n        if (!apiKey) {\n            throw new Error(\"API key is required\");\n        }\n\n        try {\n            const response = await fetch(COOKIE_URL, {\n                headers: {\n                    'x-api-key': `${apiKey}`\n                }\n            });\n\n            if (!response.ok) {\n                const error = await response.json();\n                throw new Error(error?.message || response.statusText);\n            }\n\n            return await response.json();\n        } catch (error: any) {\n            console.error(\"Cookie Service Error:\", error.message);\n            throw error;\n        }\n    };\n\n    return { getTradingAgents };\n};\n","import {\n    elizaLogger,\n    Action,\n    ActionExample,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    State,\n} from \"@elizaos/core\";\nimport { validateKilnConfig } from \"../environment\";\nimport { getVaultsExamples } from \"../examples\";\n\nexport const getVaultAction: Action = {\n    name: \"KILN_GET_VAULT\",\n    similes: [\n        \"VAULT\",\n        \"KILN STAKING SOLUTIONS\",\n        \"ERC-4626\"\n    ],\n    description: \"Get all Kiln's vaults\",\n    validate: async (runtime: IAgentRuntime) => {\n        await validateKilnConfig(runtime);\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback: HandlerCallback\n    ) => {\n        try {\n            if (callback) {\n                const text = \"- Aave v3 => USDC : 0xdea01fc5289af2c440ca65582e3c44767c0fcf08\\r\\n- Aave v3 => USDC : 0x9b80443f910832a6eed6cef5b95bd9d1dae424b5\\r\\n- Aave v3 => USDC : 0x682cfc8a3d956fba2c40791ec8d5a49e13baafbd\\r\\n- Aave v3 => USDC : 0x85fbdc49b2e7b9e07468733873c8f199fc44259f\\r\\n- Compound v3 => USDC : 0xf3a9A790f84B2E0301069BE589fc976Cf3eB5661\"\n\n                callback({\n                    text: `Here is a list of Kiln's Vaults :\\r\\n ${text}`,\n                });\n                return true;\n            }\n        } catch (error:any) {\n            elizaLogger.error(\"Error in Kiln plugin handler:\", error);\n            callback({\n                text: `Error displaying Kiln's vaults: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n    },\n    examples: getVaultsExamples as ActionExample[][],\n} as Action;\n","import {\n    elizaLogger,\n    Action,\n    ActionExample,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    State,\n} from \"@elizaos/core\";\nimport { validateCookieConfig } from \"../environment\";\nimport {getTrendingAgentsExamples} from \"../examples\";\nimport { createCookieService } from \"../services\";\nimport {TrendingAgentsResponse} from \"../types.ts\";\n\nconst formatNumber = (value: number | null): string => {\n    if (value === null || typeof value !== 'number') {\n        return 'N/A';\n    }\n    return value.toFixed(2);\n};\n\nconst formatAgentMetrics = (agent: TrendingAgentsResponse): string => {\n    const twitterHandle = agent.twitterUsernames?.[0] || 'N/A';\n\n    const metrics = [\n        `[MarketCap]=>${formatNumber(agent.marketCap)}`,\n        `[Price]=>${formatNumber(agent.price)}$`,\n        `[Liquidity]=>${formatNumber(agent.liquidity)}`\n    ].join(' | ');\n\n    const stats = [\n        `Volume last 24 hours : ${formatNumber(agent.volume24Hours)}`,\n        `~Impression Count : ${formatNumber(agent.averageImpressionCount)}`,\n        `~Engagements Count : ${formatNumber(agent.averageEngagementsCount)}`,\n        `[Followers]=>${agent.followersCount || 'N/A'}`\n    ].join('\\r\\n');\n\n    return [\n        `AI Agent Name : ${agent.agentName || 'N/A'} => @${twitterHandle}`,\n        metrics,\n        stats\n    ].join('\\r\\n');\n};\n\nexport const getTrendingAgentsAction: Action = {\n    name: \"COOKIE_GET_TRENDING\",\n    similes: [\n        \"TWITTER_AGENT\",\n        \"BEST_AI_AGENT\",\n    ],\n    description: \"Get trending AI agents\",\n    validate: async (runtime: IAgentRuntime) => {\n        await validateCookieConfig(runtime);\n        return true;\n    },\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback: HandlerCallback\n    ) => {\n        const config = await validateCookieConfig(runtime);\n        const cookieService = createCookieService(config.COOKIE_API_KEY);\n\n        try {\n            const trendingAgents = await cookieService.getTradingAgents();\n            elizaLogger.success(\"Successfully fetched Trending Agents\");\n\n            if (callback && trendingAgents?.ok?.data) {\n                const formattedAgents = trendingAgents.ok.data\n                    .map(formatAgentMetrics)\n                    .join(\"\\r\\n\\r\\n\");\n\n                callback({\n                    text: `Here are actual trending ai agents:\\r\\n${formattedAgents}`,\n                });\n                return true;\n            }\n            return false;\n        } catch (error: any) {\n            elizaLogger.error(\"Error in Cookie plugin handler:\", error);\n            callback({\n                text: `Error fetching Trending Agents: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n    },\n    examples: getTrendingAgentsExamples as ActionExample[][],\n} as Action;\n","import { Plugin } from \"@elizaos/core\"\nimport { getStakingStatisticsAction } from \"./actions/getStakingStats\"\nimport { getVaultAction } from \"./actions/getVaults\";\nimport { getTrendingAgentsAction } from \"./actions/getTrendingAgents\"\n\nexport const kilnPlugin: Plugin = {\n    name: \"kiln\",\n    description: \"Kiln plugin for Eliza\",\n    actions: [getStakingStatisticsAction, getVaultAction, getTrendingAgentsAction],\n    // evaluators analyze the situations and actions taken by the agent. they run after each agent action\n    // allowing the agent to reflect on what happened and potentially trigger additional actions or modifications\n    evaluators: [],\n    // providers supply information and state to the agent's context, help agent access necessary data\n    providers: [],\n};\nexport default kilnPlugin;\n"],"mappings":"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","names":["elizaLogger","elizaLogger","elizaLogger","elizaLogger"]}